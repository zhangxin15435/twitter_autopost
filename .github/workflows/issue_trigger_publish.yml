name: 📝 Issue触发推文发布

on:
  issues:
    types: [opened]

jobs:
  parse-and-publish:
    if: contains(github.event.issue.title, '[推文发布]')
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        pip install -r requirements.txt
        
    - name: 📝 解析Issue内容并发布
      id: parse-and-publish
      env:
        # Twitter API密钥 - ContextSpace主账号
        TWITTER_CONTEXTSPACE_CONSUMER_KEY: ${{ secrets.TWITTER_CONTEXTSPACE_CONSUMER_KEY }}
        TWITTER_CONTEXTSPACE_CONSUMER_SECRET: ${{ secrets.TWITTER_CONTEXTSPACE_CONSUMER_SECRET }}
        TWITTER_CONTEXTSPACE_ACCESS_TOKEN: ${{ secrets.TWITTER_CONTEXTSPACE_ACCESS_TOKEN }}
        TWITTER_CONTEXTSPACE_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_CONTEXTSPACE_ACCESS_TOKEN_SECRET }}
        TWITTER_CONTEXTSPACE_BEARER_TOKEN: ${{ secrets.TWITTER_CONTEXTSPACE_BEARER_TOKEN }}
        
        # OSS Discoveries账号
        TWITTER_OSSDISCOVERIES_CONSUMER_KEY: ${{ secrets.TWITTER_OSSDISCOVERIES_CONSUMER_KEY }}
        TWITTER_OSSDISCOVERIES_CONSUMER_SECRET: ${{ secrets.TWITTER_OSSDISCOVERIES_CONSUMER_SECRET }}
        TWITTER_OSSDISCOVERIES_ACCESS_TOKEN: ${{ secrets.TWITTER_OSSDISCOVERIES_ACCESS_TOKEN }}
        TWITTER_OSSDISCOVERIES_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_OSSDISCOVERIES_ACCESS_TOKEN_SECRET }}
        TWITTER_OSSDISCOVERIES_BEARER_TOKEN: ${{ secrets.TWITTER_OSSDISCOVERIES_BEARER_TOKEN }}
        
        # AI Flow Watch账号
        TWITTER_AIFLOWWATCH_CONSUMER_KEY: ${{ secrets.TWITTER_AIFLOWWATCH_CONSUMER_KEY }}
        TWITTER_AIFLOWWATCH_CONSUMER_SECRET: ${{ secrets.TWITTER_AIFLOWWATCH_CONSUMER_SECRET }}
        TWITTER_AIFLOWWATCH_ACCESS_TOKEN: ${{ secrets.TWITTER_AIFLOWWATCH_ACCESS_TOKEN }}
        TWITTER_AIFLOWWATCH_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_AIFLOWWATCH_ACCESS_TOKEN_SECRET }}
        TWITTER_AIFLOWWATCH_BEARER_TOKEN: ${{ secrets.TWITTER_AIFLOWWATCH_BEARER_TOKEN }}
        
        # Open Source Reader账号
        TWITTER_OPENSOURCEREADER_CONSUMER_KEY: ${{ secrets.TWITTER_OPENSOURCEREADER_CONSUMER_KEY }}
        TWITTER_OPENSOURCEREADER_CONSUMER_SECRET: ${{ secrets.TWITTER_OPENSOURCEREADER_CONSUMER_SECRET }}
        TWITTER_OPENSOURCEREADER_ACCESS_TOKEN: ${{ secrets.TWITTER_OPENSOURCEREADER_ACCESS_TOKEN }}
        TWITTER_OPENSOURCEREADER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_OPENSOURCEREADER_ACCESS_TOKEN_SECRET }}
        TWITTER_OPENSOURCEREADER_BEARER_TOKEN: ${{ secrets.TWITTER_OPENSOURCEREADER_BEARER_TOKEN }}
        
      run: |
        python3 << 'EOF'
        import os
        import sys
        import json
        import re
        from main_multi_account import MultiAccountTwitterPublisher
        
        # 获取Issue内容
        issue_body = """${{ github.event.issue.body }}"""
        issue_number = "${{ github.event.issue.number }}"
        
        print(f"🔍 处理Issue #{issue_number}")
        print(f"📝 Issue内容: {issue_body[:100]}...")
        
        def parse_issue_content(content):
            """解析Issue内容，提取推文数据"""
            tweets = []
            
            # 方法1：JSON格式
            json_match = re.search(r'```json\n(.*?)\n```', content, re.DOTALL)
            if json_match:
                try:
                    data = json.loads(json_match.group(1))
                    if isinstance(data, list):
                        tweets.extend(data)
                    else:
                        tweets.append(data)
                    return tweets
                except:
                    pass
            
            # 方法2：结构化文本格式
            lines = content.split('\n')
            current_tweet = {}
            
            for line in lines:
                line = line.strip()
                if line.startswith('**内容:**') or line.startswith('内容:'):
                    content_text = line.split(':', 1)[1].strip()
                    # 清理可能的星号
                    content_text = content_text.lstrip('*').strip()
                    current_tweet['content'] = content_text
                elif line.startswith('**账号:**') or line.startswith('账号:'):
                    account_text = line.split(':', 1)[1].strip()
                    # 清理可能的星号
                    account_text = account_text.lstrip('*').strip()
                    current_tweet['account'] = account_text
                elif line.startswith('---') and current_tweet:
                    tweets.append(current_tweet)
                    current_tweet = {}
            
            # 添加最后一条推文
            if current_tweet.get('content'):
                tweets.append(current_tweet)
            
            # 方法3：简单格式（如果没有找到结构化内容）
            if not tweets:
                # 查找可能的推文内容
                content_lines = [line.strip() for line in lines if line.strip() and not line.startswith('#')]
                if content_lines:
                    # 取所有内容，但检查长度限制
                    full_content = '\n'.join(content_lines)
                    
                    # 如果内容超过280字符，截断并添加提示
                    if len(full_content) > 280:
                        truncated_content = full_content[:270] + "...[内容过长已截断]"
                        print(f"⚠️ 内容超长({len(full_content)}字符)，已截断为: {truncated_content}")
                        tweets.append({
                            'content': truncated_content,
                            'account': 'ContextSpace'  # 默认账号
                        })
                    else:
                        tweets.append({
                            'content': full_content,
                            'account': 'ContextSpace'  # 默认账号
                        })
            
            return tweets
        
        def normalize_account_name(account):
            """标准化账号名称"""
            account = account.lower().strip()
            mapping = {
                'contextspace': 'ContextSpace',
                'context space': 'ContextSpace',
                'twitter': 'ContextSpace',
                'oss discoveries': 'OSS Discoveries',
                'ossdiscoveries': 'OSS Discoveries',
                'oss': 'OSS Discoveries',
                'ai flow watch': 'Ai flow watch',
                'aiflowwatch': 'Ai flow watch',
                'ai': 'Ai flow watch',
                'open source reader': 'Open source reader',
                'opensourcereader': 'Open source reader',
                'reader': 'Open source reader'
            }
            return mapping.get(account, 'ContextSpace')
        
        try:
            # 解析推文数据
            tweets = parse_issue_content(issue_body)
            
            if not tweets:
                print("❌ 未找到有效的推文内容")
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write("success_count=0\n")
                    f.write("total_count=0\n")
                    f.write("error_message=推文内容格式不正确或为空\n")
                sys.exit(0)  # 不要失败退出，让后续步骤处理
            
            print(f"✅ 解析到 {len(tweets)} 条推文")
            
            # 初始化发布器
            publisher = MultiAccountTwitterPublisher()
            
            # 发布推文
            success_count = 0
            error_messages = []
            
            for i, tweet in enumerate(tweets):
                content = tweet.get('content', '').strip()
                account = normalize_account_name(tweet.get('account', 'ContextSpace'))
                
                if not content:
                    print(f"⚠️ 第{i+1}条推文内容为空，跳过")
                    continue
                
                if len(content) > 280:
                    print(f"⚠️ 第{i+1}条推文内容超长({len(content)}字符)，截断处理")
                    content = content[:277] + "..."
                
                print(f"📤 发布第{i+1}条推文到 {account}")
                print(f"📝 内容: {content[:50]}...")
                
                try:
                    # 使用单账号立即发布模式，避免对其他账号发送API请求
                    result = publisher.publish_single_tweet_only(content, account)
                    if result['success']:
                        success_count += 1
                        print(f"✅ 第{i+1}条推文发布成功")
                        print(f"   账号: {result['details'].get('username', 'unknown')}")
                    else:
                        error_msg = f"第{i+1}条推文发布失败: {result['message']}"
                        print(f"❌ {error_msg}")
                        error_messages.append(error_msg)
                except Exception as e:
                    error_msg = f"第{i+1}条推文发布异常: {str(e)}"
                    print(f"💥 {error_msg}")
                    error_messages.append(error_msg)
                    
                    # 检查是否是速率限制错误
                    if "rate limit" in str(e).lower() or "too many requests" in str(e).lower():
                        print("⚠️ 检测到Twitter API速率限制，停止后续发布")
                        error_messages.append("Twitter API速率限制，请稍后重试")
                        break
            
            print(f"\n🎉 发布完成: {success_count}/{len(tweets)} 条成功")
            
            # 设置输出变量用于后续步骤
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"success_count={success_count}\n")
                f.write(f"total_count={len(tweets)}\n")
                if error_messages:
                    f.write(f"error_message={'; '.join(error_messages[:3])}\n")  # 只取前3个错误
                
        except Exception as e:
            error_msg = f"发布过程出现错误: {str(e)}"
            print(f"💥 {error_msg}")
            import traceback
            traceback.print_exc()
            
            # 设置错误输出
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("success_count=0\n")
                f.write("total_count=0\n")
                f.write(f"error_message={error_msg}\n")
            sys.exit(0)  # 不要失败退出，让后续步骤处理
        EOF
        
    - name: 💬 回复Issue结果
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const success_count = '${{ steps.parse-and-publish.outputs.success_count }}' || '0';
          const total_count = '${{ steps.parse-and-publish.outputs.total_count }}' || '0';
          const error_message = '${{ steps.parse-and-publish.outputs.error_message }}' || '';
          
          let comment = '';
          
          if (success_count > 0) {
            if (success_count == total_count) {
              comment = `🎉 **推文发布完成！**\n\n✅ 成功发布: ${success_count}/${total_count} 条推文\n\n📊 发布结果已记录，感谢您的使用！`;
            } else {
              comment = `⚠️ **推文部分发布成功**\n\n✅ 成功发布: ${success_count}/${total_count} 条推文\n\n❌ 部分失败原因: ${error_message}\n\n💡 建议稍后重试失败的内容。`;
            }
          } else if (error_message.includes('速率限制') || error_message.includes('rate limit')) {
            comment = `⏱️ **Twitter API速率限制**\n\n😅 抱歉，遇到了Twitter API的速率限制，这是正常的保护机制。\n\n🔄 **解决方案**:\n- 请等待10-15分钟后重新创建Issue\n- 或者稍后使用前端界面发布\n- 这个限制会自动恢复，无需担心\n\n📋 **您的内容已记录**，稍后可以重试发布。`;
          } else if (error_message.includes('格式')) {
            comment = `📝 **推文格式问题**\n\n❌ 发布失败原因: ${error_message}\n\n✅ **正确格式**:\n\`\`\`\n**内容:** 您的推文内容\n**账号:** ContextSpace\n\`\`\`\n\n🎯 **支持的账号**:\n- ContextSpace (主账号)\n- OSS Discoveries (开源工具)\n- AI Flow Watch (AI技术)\n- Open Source Reader (开源项目)\n\n请按正确格式重新创建Issue。`;
          } else {
            comment = `❌ **推文发布失败**\n\n🔍 **失败原因**: ${error_message || '未知错误'}\n\n🛠️ **可能的解决方案**:\n- 检查推文内容格式是否正确\n- 确认推文内容不超过280字符\n- 检查账号名称是否正确\n- 稍后重试（可能是临时网络问题）\n\n📋 如果问题持续，请查看 [使用指南](https://github.com/zhangxin15435/twitter_autopost/blob/master/ISSUE_PUBLISH_GUIDE.md)。`;
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: 🏷️ 添加标签
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const success_count = '${{ steps.parse-and-publish.outputs.success_count }}' || '0';
          const total_count = '${{ steps.parse-and-publish.outputs.total_count }}' || '0';
          const error_message = '${{ steps.parse-and-publish.outputs.error_message }}' || '';
          
          let labels = [];
          
          if (success_count > 0) {
            if (success_count == total_count) {
              labels = ['published'];
            } else {
              labels = ['partially-published'];
            }
          } else if (error_message.includes('速率限制') || error_message.includes('rate limit')) {
            labels = ['rate-limited'];
          } else if (error_message.includes('格式')) {
            labels = ['format-error'];
          } else {
            labels = ['failed'];
          }
          
          // 移除pending标签
          try {
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'pending'
            });
          } catch (error) {
            // 如果pending标签不存在，忽略错误
          }
          
          // 添加新标签
          await github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: labels
          }); 